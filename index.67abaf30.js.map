{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","src/modules/Cell.class.js","src/modules/FullCell.class.js"],"sourcesContent":["(function () {\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $c50969dc1df61e8b$export$7e0947b5ad3404e2)(arr) || (0, $09c9f293d010c0e1$export$1eb58a6e75231000)(arr) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr) || (0, $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b)();\n}\n\n\n\n\nvar $aa935420732e3b94$export$f6f0c3fe4ec306ea = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Cell(gridElement, x, y) {\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Cell);\n        var emptyCell = document.createElement(\"div\");\n        emptyCell.classList.add(\"empty-cell\");\n        gridElement.append(emptyCell);\n        this.x = x;\n        this.y = y;\n        this.element = emptyCell;\n        this.linkedTile = null;\n        this.linkedTileForMerge = null;\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Cell, [\n        {\n            key: \"linkTile\",\n            value: function linkTile(tile) {\n                tile.setXY(this.x, this.y);\n                this.linkedTile = tile;\n            }\n        },\n        {\n            key: \"unlinkedTile\",\n            value: function unlinkedTile() {\n                this.linkedTile = null;\n            }\n        },\n        {\n            key: \"isEmpty\",\n            value: function isEmpty() {\n                return !this.linkedTile;\n            }\n        },\n        {\n            key: \"linkTileForMerge\",\n            value: function linkTileForMerge(tile) {\n                tile.setXY(this.x, this.y);\n                this.linkedTileForMerge = tile;\n            }\n        },\n        {\n            key: \"unlinkTileForMerge\",\n            value: function unlinkTileForMerge() {\n                this.linkedTileForMerge = null;\n            }\n        },\n        {\n            key: \"hasTileForMerge\",\n            value: function hasTileForMerge() {\n                return !!this.linkedTileForMerge;\n            }\n        },\n        {\n            key: \"canAccept\",\n            value: function canAccept(newTile) {\n                return this.isEmpty() || !this.hasTileForMerge() && this.linkedTile.value === newTile.value;\n            }\n        },\n        {\n            key: \"mergeTiles\",\n            value: function mergeTiles() {\n                this.linkedTile.setValue(this.linkedTile.value + this.linkedTileForMerge.value);\n                this.linkedTileForMerge.remove();\n                this.unlinkTileForMerge();\n            }\n        }\n    ]);\n    return Cell;\n}();\n\n\n\n\nvar $ffba5b38ced4b41f$export$f245c1f6b4acef08 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function FullCell(gridElement) {\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, FullCell);\n        this.element = document.createElement(\"div\");\n        this.element.classList.add(\"full-cell\");\n        this.setValue(Math.random() < 0.9 ? 2 : 4);\n        gridElement.append(this.element);\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(FullCell, [\n        {\n            key: \"setXY\",\n            value: function setXY(x, y) {\n                this.x = x;\n                this.y = y;\n                this.element.style.setProperty(\"--x\", x);\n                this.element.style.setProperty(\"--y\", y);\n            }\n        },\n        {\n            key: \"setValue\",\n            value: function setValue(value) {\n                this.value = value;\n                this.element.textContent = this.value;\n                this.element.classList.remove(\"full-cell--2\", \"full-cell--4\", \"full-cell--8\", \"full-cell--16\", \"full-cell--32\", \"full-cell--64\", \"full-cell--128\", \"full-cell--256\", \"full-cell--512\", \"full-cell--1024\", \"full-cell--2048\");\n                this.element.classList.add(\"full-cell--\".concat(value));\n            }\n        },\n        {\n            key: \"remove\",\n            value: function remove() {\n                this.element.remove();\n            }\n        }\n    ]);\n    return FullCell;\n}();\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$GRID_SIZE = 4;\nvar $3d28d7f1aac198f5$var$CELLS_COUNT = $3d28d7f1aac198f5$var$GRID_SIZE * $3d28d7f1aac198f5$var$GRID_SIZE;\nvar $3d28d7f1aac198f5$export$2e2bcd8739ae039 = /*#__PURE__*/ function() {\n    function Game(gridElement) {\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        this.gridElement = gridElement;\n        this.cells = [];\n        this.score = 0;\n        this.status = \"idle\";\n        for(var i = 0; i < $3d28d7f1aac198f5$var$CELLS_COUNT; i++)this.cells.push(new (0, $aa935420732e3b94$export$f6f0c3fe4ec306ea)(gridElement, i % $3d28d7f1aac198f5$var$GRID_SIZE, Math.floor(i / $3d28d7f1aac198f5$var$GRID_SIZE)));\n        this.cellsGroupedByColumn = this.groupCellsByColumn();\n        this.cellsGroupedByReversedColumn = this.cellsGroupedByColumn.map(function(column) {\n            return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(column).reverse();\n        });\n        this.cellsGroupedByRow = this.groupCellsByRow();\n        this.cellsGroupedByReversedRow = this.cellsGroupedByRow.map(function(row) {\n            return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row).reverse();\n        });\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"init\",\n            value: function init() {\n                this.createNewTile();\n                this.createNewTile();\n                this.status = \"playing\";\n            }\n        },\n        {\n            key: \"getRandomEmptyCell\",\n            value: function getRandomEmptyCell() {\n                var emptyCells = this.cells.filter(function(cell) {\n                    return cell.isEmpty();\n                });\n                var randomIndex = Math.floor(Math.random() * emptyCells.length);\n                return emptyCells[randomIndex];\n            }\n        },\n        {\n            key: \"groupCellsByColumn\",\n            value: function groupCellsByColumn() {\n                return this.cells.reduce(function(groupedCells, cell) {\n                    groupedCells[cell.x] = groupedCells[cell.x] || [];\n                    groupedCells[cell.x][cell.y] = cell;\n                    return groupedCells;\n                }, []);\n            }\n        },\n        {\n            key: \"groupCellsByRow\",\n            value: function groupCellsByRow() {\n                return this.cells.reduce(function(groupedCells, cell) {\n                    groupedCells[cell.y] = groupedCells[cell.y] || [];\n                    groupedCells[cell.y][cell.x] = cell;\n                    return groupedCells;\n                }, []);\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                this.slideTiles(this.cellsGroupedByRow);\n                this.checkGameOver();\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                this.slideTiles(this.cellsGroupedByReversedRow);\n                this.checkGameOver();\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                this.slideTiles(this.cellsGroupedByColumn);\n                this.checkGameOver();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                this.slideTiles(this.cellsGroupedByReversedColumn);\n                this.checkGameOver();\n            }\n        },\n        {\n            key: \"slideTiles\",\n            value: function slideTiles(groupedCells) {\n                var _this = this;\n                groupedCells.forEach(function(group) {\n                    return _this.slideTilesInGroup(group);\n                });\n                this.cells.forEach(function(cell) {\n                    // eslint-disable-next-line no-unused-expressions\n                    cell.hasTileForMerge() && cell.mergeTiles();\n                });\n                this.createNewTile();\n                this.updateScore();\n            }\n        },\n        {\n            key: \"slideTilesInGroup\",\n            value: function slideTilesInGroup(group) {\n                for(var i = 1; i < group.length; i++){\n                    if (group[i].isEmpty()) continue;\n                    var cellWithTile = group[i];\n                    var targetCell = void 0;\n                    var j = i - 1;\n                    while(j >= 0 && group[j].canAccept(cellWithTile.linkedTile)){\n                        targetCell = group[j];\n                        j--;\n                    }\n                    if (!targetCell) continue;\n                    if (targetCell.isEmpty()) targetCell.linkTile(cellWithTile.linkedTile);\n                    else if (targetCell.linkedTile.value === cellWithTile.linkedTile.value) {\n                        var points = targetCell.linkedTile.value * 2;\n                        this.score += points;\n                        targetCell.linkTileForMerge(cellWithTile.linkedTile);\n                        cellWithTile.unlinkedTile();\n                    }\n                    cellWithTile.unlinkedTile();\n                }\n            }\n        },\n        {\n            key: \"canMoveUp\",\n            value: function canMoveUp() {\n                return this.canMove(this.cellsGroupedByColumn);\n            }\n        },\n        {\n            key: \"canMoveDown\",\n            value: function canMoveDown() {\n                return this.canMove(this.cellsGroupedByReversedColumn);\n            }\n        },\n        {\n            key: \"canMoveLeft\",\n            value: function canMoveLeft() {\n                return this.canMove(this.cellsGroupedByRow);\n            }\n        },\n        {\n            key: \"canMoveRight\",\n            value: function canMoveRight() {\n                return this.canMove(this.cellsGroupedByReversedRow);\n            }\n        },\n        {\n            key: \"canMove\",\n            value: function canMove(groupedCells) {\n                var _this = this;\n                return groupedCells.some(function(group) {\n                    return _this.canMoveInGroup(group);\n                });\n            }\n        },\n        {\n            key: \"canMoveInGroup\",\n            value: function canMoveInGroup(group) {\n                return group.some(function(cell, index) {\n                    if (index === 0) return false;\n                    if (cell.isEmpty()) return false;\n                    var targetCell = group[index - 1];\n                    return targetCell.canAccept(cell.linkedTile);\n                });\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                var scoreElement = document.querySelector(\".game-score\");\n                scoreElement.textContent = this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.cells.map(function(cell) {\n                    return {\n                        x: cell.x,\n                        y: cell.y,\n                        value: cell.linkedTile ? cell.linkedTile.value : null\n                    };\n                });\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.score = 0;\n                this.updateScore();\n                this.clearGrid();\n                this.init();\n                this.status = \"playing\";\n                this.checkGameOver();\n            }\n        },\n        {\n            key: \"updateScore\",\n            value: function updateScore() {\n                var scoreElement = document.querySelector(\".game-score\");\n                if (scoreElement) scoreElement.textContent = this.score;\n            }\n        },\n        {\n            key: \"clearGrid\",\n            value: function clearGrid() {\n                var FullCells = document.querySelectorAll(\".full-cell\");\n                FullCells.forEach(function(cell) {\n                    return cell.remove();\n                });\n                this.cells.forEach(function(cell) {\n                    cell.linkedTile = null;\n                    cell.linkedTileForMerge = null;\n                });\n            }\n        },\n        {\n            key: \"createNewTile\",\n            value: function createNewTile() {\n                var cell = this.getRandomEmptyCell();\n                if (cell) {\n                    // eslint-disable-next-line new-cap\n                    var tile = new (0, $ffba5b38ced4b41f$export$f245c1f6b4acef08)(this.gridElement);\n                    cell.linkTile(tile);\n                    tile.setXY(cell.x, cell.y);\n                }\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.clearGrid();\n                this.score = 0;\n                this.updateScore();\n                this.status = \"playing\";\n            }\n        },\n        {\n            key: \"checkForWin\",\n            value: function checkForWin() {\n                return this.cells.find(function(cell) {\n                    return cell.linkedTile && cell.linkedTile.value === 2048;\n                }) !== undefined;\n            }\n        },\n        {\n            key: \"checkGameOver\",\n            value: function checkGameOver() {\n                if (!this.canMoveUp() && !this.canMoveDown() && !this.canMoveLeft() && !this.canMoveRight()) {\n                    var messageLose = document.querySelector(\"p.message-lose\");\n                    this.status = \"lose\";\n                    messageLose.classList.remove(\"hidden\");\n                }\n            }\n        }\n    ]);\n    return Game;\n}();\n\n\n\"use strict\";\nvar $197cd56b15c33885$var$gameField = document.querySelector(\".game-field\");\nvar $197cd56b15c33885$var$messageStart = document.querySelector(\"p.message-start\");\nvar $197cd56b15c33885$var$messageWin = document.querySelector(\"p.message-win\");\nvar $197cd56b15c33885$var$messageLose = document.querySelector(\"p.message-lose\");\nvar $197cd56b15c33885$var$game = new (0, $3d28d7f1aac198f5$export$2e2bcd8739ae039)($197cd56b15c33885$var$gameField);\nvar $197cd56b15c33885$var$startButton = document.querySelector(\".button.start\");\nvar $197cd56b15c33885$var$restartButton = document.querySelector(\".button.restart\");\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", function() {\n    $197cd56b15c33885$var$game.start();\n    $197cd56b15c33885$var$messageStart.classList.add(\"hidden\");\n    $197cd56b15c33885$var$messageLose.classList.add(\"hidden\");\n    $197cd56b15c33885$var$messageWin.classList.add(\"hidden\");\n    $197cd56b15c33885$var$startButton.style.display = \"none\";\n    $197cd56b15c33885$var$restartButton.style.display = \"block\";\n});\n$197cd56b15c33885$var$restartButton.addEventListener(\"click\", function() {\n    $197cd56b15c33885$var$game.restart();\n    $197cd56b15c33885$var$startButton.textContent = \"Start\";\n    $197cd56b15c33885$var$startButton.classList.remove(\"restart\");\n    $197cd56b15c33885$var$startButton.classList.add(\"start\");\n    $197cd56b15c33885$var$messageStart.classList.remove(\"hidden\");\n    $197cd56b15c33885$var$messageLose.classList.add(\"hidden\");\n    $197cd56b15c33885$var$startButton.style.display = \"block\";\n    $197cd56b15c33885$var$restartButton.style.display = \"none\";\n});\n$197cd56b15c33885$var$setupInputOnce();\nfunction $197cd56b15c33885$var$setupInputOnce() {\n    window.addEventListener(\"keydown\", $197cd56b15c33885$var$handleInput, {\n        once: true\n    });\n}\n// eslint-disable-next-line no-shadow\nfunction $197cd56b15c33885$var$handleInput(event) {\n    switch(event.key){\n        case \"ArrowLeft\":\n            if ($197cd56b15c33885$var$game.canMoveLeft()) $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            if ($197cd56b15c33885$var$game.canMoveRight()) $197cd56b15c33885$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            if ($197cd56b15c33885$var$game.canMoveUp()) $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            if ($197cd56b15c33885$var$game.canMoveDown()) $197cd56b15c33885$var$game.moveDown();\n            break;\n        default:\n            $197cd56b15c33885$var$setupInputOnce();\n            return;\n    }\n    if ($197cd56b15c33885$var$game.checkForWin()) $197cd56b15c33885$var$messageWin.classList.remove(\"hidden\");\n    $197cd56b15c33885$var$setupInputOnce();\n}\n\n})();\n//# sourceMappingURL=index.67abaf30.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nimport Game from '../modules/Game.class';\n\nconst gameField = document.querySelector('.game-field');\nconst messageStart = document.querySelector('p.message-start');\nconst messageWin = document.querySelector('p.message-win');\nconst messageLose = document.querySelector('p.message-lose');\n\nconst game = new Game(gameField);\n\nconst startButton = document.querySelector('.button.start');\nconst restartButton = document.querySelector('.button.restart');\n\nstartButton.addEventListener('click', () => {\n  game.start();\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n\n  startButton.style.display = 'none';\n  restartButton.style.display = 'block';\n});\n\nrestartButton.addEventListener('click', () => {\n  game.restart();\n  startButton.textContent = 'Start';\n  startButton.classList.remove('restart');\n  startButton.classList.add('start');\n  messageStart.classList.remove('hidden');\n  messageLose.classList.add('hidden');\n\n  startButton.style.display = 'block';\n  restartButton.style.display = 'none';\n});\n\nsetupInputOnce();\n\nfunction setupInputOnce() {\n  window.addEventListener('keydown', handleInput, { once: true });\n}\n\n// eslint-disable-next-line no-shadow\nfunction handleInput(event) {\n  switch (event.key) {\n    case 'ArrowLeft':\n      if (game.canMoveLeft()) {\n        game.moveLeft();\n      }\n      break;\n    case 'ArrowRight':\n      if (game.canMoveRight()) {\n        game.moveRight();\n      }\n      break;\n    case 'ArrowUp':\n      if (game.canMoveUp()) {\n        game.moveUp();\n      }\n      break;\n    case 'ArrowDown':\n      if (game.canMoveDown()) {\n        game.moveDown();\n      }\n      break;\n    default:\n      setupInputOnce();\n\n      return;\n  }\n\n  if (game.checkForWin()) {\n    messageWin.classList.remove('hidden');\n  }\n\n  setupInputOnce();\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nimport { Cell } from './Cell.class';\nimport { FullCell } from './FullCell.class';\n\nconst GRID_SIZE = 4;\nconst CELLS_COUNT = GRID_SIZE * GRID_SIZE;\n\nexport default class Game {\n  constructor(gridElement) {\n    this.gridElement = gridElement;\n    this.cells = [];\n    this.score = 0;\n    this.status = 'idle';\n\n    for (let i = 0; i < CELLS_COUNT; i++) {\n      this.cells.push(\n        new Cell(gridElement, i % GRID_SIZE, Math.floor(i / GRID_SIZE)),\n      );\n    }\n\n    this.cellsGroupedByColumn = this.groupCellsByColumn();\n\n    this.cellsGroupedByReversedColumn = this.cellsGroupedByColumn.map(\n      (column) => [...column].reverse(),\n    );\n\n    this.cellsGroupedByRow = this.groupCellsByRow();\n\n    this.cellsGroupedByReversedRow = this.cellsGroupedByRow.map(\n      (row) => [...row].reverse(),\n      // eslint-disable-next-line function-paren-newline\n    );\n  }\n\n  init() {\n    this.createNewTile();\n    this.createNewTile();\n    this.status = 'playing';\n  }\n\n  getRandomEmptyCell() {\n    const emptyCells = this.cells.filter((cell) => cell.isEmpty());\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n    return emptyCells[randomIndex];\n  }\n\n  groupCellsByColumn() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.x] = groupedCells[cell.x] || [];\n      groupedCells[cell.x][cell.y] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n\n  groupCellsByRow() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.y] = groupedCells[cell.y] || [];\n      groupedCells[cell.y][cell.x] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n\n  moveLeft() {\n    this.slideTiles(this.cellsGroupedByRow);\n    this.checkGameOver();\n  }\n\n  moveRight() {\n    this.slideTiles(this.cellsGroupedByReversedRow);\n    this.checkGameOver();\n  }\n\n  moveUp() {\n    this.slideTiles(this.cellsGroupedByColumn);\n    this.checkGameOver();\n  }\n\n  moveDown() {\n    this.slideTiles(this.cellsGroupedByReversedColumn);\n    this.checkGameOver();\n  }\n\n  slideTiles(groupedCells) {\n    groupedCells.forEach((group) => this.slideTilesInGroup(group));\n\n    this.cells.forEach((cell) => {\n      // eslint-disable-next-line no-unused-expressions\n      cell.hasTileForMerge() && cell.mergeTiles();\n    });\n\n    this.createNewTile();\n    this.updateScore();\n  }\n\n  slideTilesInGroup(group) {\n    for (let i = 1; i < group.length; i++) {\n      if (group[i].isEmpty()) {\n        continue;\n      }\n\n      const cellWithTile = group[i];\n\n      let targetCell;\n      let j = i - 1;\n\n      while (j >= 0 && group[j].canAccept(cellWithTile.linkedTile)) {\n        targetCell = group[j];\n        j--;\n      }\n\n      if (!targetCell) {\n        continue;\n      }\n\n      if (targetCell.isEmpty()) {\n        targetCell.linkTile(cellWithTile.linkedTile);\n      } else if (\n        targetCell.linkedTile.value === cellWithTile.linkedTile.value\n      ) {\n        const points = targetCell.linkedTile.value * 2;\n\n        this.score += points;\n\n        targetCell.linkTileForMerge(cellWithTile.linkedTile);\n        cellWithTile.unlinkedTile();\n      }\n\n      cellWithTile.unlinkedTile();\n    }\n  }\n\n  canMoveUp() {\n    return this.canMove(this.cellsGroupedByColumn);\n  }\n\n  canMoveDown() {\n    return this.canMove(this.cellsGroupedByReversedColumn);\n  }\n\n  canMoveLeft() {\n    return this.canMove(this.cellsGroupedByRow);\n  }\n\n  canMoveRight() {\n    return this.canMove(this.cellsGroupedByReversedRow);\n  }\n\n  canMove(groupedCells) {\n    return groupedCells.some((group) => this.canMoveInGroup(group));\n  }\n\n  canMoveInGroup(group) {\n    return group.some((cell, index) => {\n      if (index === 0) {\n        return false;\n      }\n\n      if (cell.isEmpty()) {\n        return false;\n      }\n\n      const targetCell = group[index - 1];\n\n      return targetCell.canAccept(cell.linkedTile);\n    });\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    const scoreElement = document.querySelector('.game-score');\n\n    scoreElement.textContent = this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.cells.map((cell) => ({\n      x: cell.x,\n      y: cell.y,\n      value: cell.linkedTile ? cell.linkedTile.value : null,\n    }));\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.score = 0;\n    this.updateScore();\n    this.clearGrid();\n\n    this.init();\n    this.status = 'playing';\n    this.checkGameOver();\n  }\n\n  updateScore() {\n    const scoreElement = document.querySelector('.game-score');\n\n    if (scoreElement) {\n      scoreElement.textContent = this.score;\n    }\n  }\n\n  clearGrid() {\n    const FullCells = document.querySelectorAll('.full-cell');\n\n    FullCells.forEach((cell) => cell.remove());\n\n    this.cells.forEach((cell) => {\n      cell.linkedTile = null;\n      cell.linkedTileForMerge = null;\n    });\n  }\n\n  createNewTile() {\n    const cell = this.getRandomEmptyCell();\n\n    if (cell) {\n      // eslint-disable-next-line new-cap\n      const tile = new FullCell(this.gridElement);\n\n      cell.linkTile(tile);\n\n      tile.setXY(cell.x, cell.y);\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.clearGrid();\n    this.score = 0;\n    this.updateScore();\n    this.status = 'playing';\n  }\n\n  checkForWin() {\n    return (\n      this.cells.find(\n        (cell) => cell.linkedTile && cell.linkedTile.value === 2048,\n      ) !== undefined\n    );\n  }\n\n  checkGameOver() {\n    if (\n      !this.canMoveUp() &&\n      !this.canMoveDown() &&\n      !this.canMoveLeft() &&\n      !this.canMoveRight()\n    ) {\n      const messageLose = document.querySelector('p.message-lose');\n\n      this.status = 'lose';\n      messageLose.classList.remove('hidden');\n    }\n  }\n}\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","export class Cell {\n  constructor(gridElement, x, y) {\n    const emptyCell = document.createElement('div');\n\n    emptyCell.classList.add('empty-cell');\n    gridElement.append(emptyCell);\n    this.x = x;\n    this.y = y;\n    this.element = emptyCell;\n    this.linkedTile = null;\n    this.linkedTileForMerge = null;\n  }\n\n  linkTile(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTile = tile;\n  }\n\n  unlinkedTile() {\n    this.linkedTile = null;\n  }\n\n  isEmpty() {\n    return !this.linkedTile;\n  }\n\n  linkTileForMerge(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTileForMerge = tile;\n  }\n\n  unlinkTileForMerge() {\n    this.linkedTileForMerge = null;\n  }\n\n  hasTileForMerge() {\n    return !!this.linkedTileForMerge;\n  }\n\n  canAccept(newTile) {\n    return (\n      this.isEmpty() ||\n      (!this.hasTileForMerge() && this.linkedTile.value === newTile.value)\n    );\n  }\n\n  mergeTiles() {\n    this.linkedTile.setValue(\n      this.linkedTile.value + this.linkedTileForMerge.value,\n    );\n    this.linkedTileForMerge.remove();\n    this.unlinkTileForMerge();\n  }\n}\n","export class FullCell {\n  constructor(gridElement) {\n    this.element = document.createElement('div');\n    this.element.classList.add('full-cell');\n    this.setValue(Math.random() < 0.9 ? 2 : 4);\n\n    gridElement.append(this.element);\n  }\n\n  setXY(x, y) {\n    this.x = x;\n    this.y = y;\n    this.element.style.setProperty('--x', x);\n    this.element.style.setProperty('--y', y);\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.element.textContent = this.value;\n\n    this.element.classList.remove(\n      'full-cell--2',\n      'full-cell--4',\n      'full-cell--8',\n      'full-cell--16',\n      'full-cell--32',\n      'full-cell--64',\n      'full-cell--128',\n      'full-cell--256',\n      'full-cell--512',\n      'full-cell--1024',\n      'full-cell--2048',\n    );\n\n    this.element.classList.add(`full-cell--${value}`);\n  }\n\n  remove() {\n    this.element.remove();\n  }\n}\n"],"names":["$8713978b2328d32b$export$2996f80ef42b8419","instance","Constructor","TypeError","$4fc75ccb937ab1df$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","$4fc75ccb937ab1df$export$d60067ff2358eee8","protoProps","staticProps","prototype","$c3b10a83b523f372$export$79e617b1955a2616","arr","len","arr2","Array","$227c6742e0ff6f82$export$1b5e630bc3aea29f","isArray","iter","Symbol","iterator","from","o","minLen","n","toString","call","slice","constructor","name","test","$aa935420732e3b94$export$f6f0c3fe4ec306ea","Cell","gridElement","x","y","emptyCell","document","createElement","classList","add","append","element","linkedTile","linkedTileForMerge","value","tile","setXY","newTile","isEmpty","hasTileForMerge","setValue","remove","unlinkTileForMerge","$ffba5b38ced4b41f$export$f245c1f6b4acef08","FullCell","Math","random","style","setProperty","textContent","concat","$3d28d7f1aac198f5$export$2e2bcd8739ae039","Game","cells","score","status","$3d28d7f1aac198f5$var$GRID_SIZE","push","floor","cellsGroupedByColumn","groupCellsByColumn","cellsGroupedByReversedColumn","map","column","reverse","cellsGroupedByRow","groupCellsByRow","cellsGroupedByReversedRow","row","createNewTile","emptyCells","filter","cell","randomIndex","reduce","groupedCells","slideTiles","checkGameOver","_this","forEach","group","slideTilesInGroup","mergeTiles","updateScore","cellWithTile","targetCell","j","canAccept","linkTile","points","linkTileForMerge","unlinkedTile","canMove","some","canMoveInGroup","index","scoreElement","querySelector","clearGrid","init","FullCells","querySelectorAll","getRandomEmptyCell","undefined","find","canMoveUp","canMoveDown","canMoveLeft","canMoveRight","messageLose","$197cd56b15c33885$var$gameField","$197cd56b15c33885$var$messageStart","$197cd56b15c33885$var$messageWin","$197cd56b15c33885$var$messageLose","$197cd56b15c33885$var$game","$197cd56b15c33885$var$startButton","$197cd56b15c33885$var$restartButton","$197cd56b15c33885$var$setupInputOnce","window","addEventListener","$197cd56b15c33885$var$handleInput","once","event","moveLeft","moveRight","moveUp","moveDown","checkForWin","start","display","restart"],"version":3,"file":"index.67abaf30.js.map"}