{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","src/modules/Cell.class.js","src/modules/FullCell.class.js"],"sourcesContent":["class $03bae4f354eafb0f$export$f6f0c3fe4ec306ea {\n    constructor(gridElement, x, y){\n        const emptyCell = document.createElement(\"div\");\n        emptyCell.classList.add(\"empty-cell\");\n        gridElement.append(emptyCell);\n        this.x = x;\n        this.y = y;\n        this.element = emptyCell;\n        this.linkedTile = null;\n        this.linkedTileForMerge = null;\n    }\n    linkTile(tile) {\n        tile.setXY(this.x, this.y);\n        this.linkedTile = tile;\n    }\n    unlinkedTile() {\n        this.linkedTile = null;\n    }\n    isEmpty() {\n        return !this.linkedTile;\n    }\n    linkTileForMerge(tile) {\n        tile.setXY(this.x, this.y);\n        this.linkedTileForMerge = tile;\n    }\n    unlinkTileForMerge() {\n        this.linkedTileForMerge = null;\n    }\n    hasTileForMerge() {\n        return !!this.linkedTileForMerge;\n    }\n    canAccept(newTile) {\n        return this.isEmpty() || !this.hasTileForMerge() && this.linkedTile.value === newTile.value;\n    }\n    mergeTiles() {\n        this.linkedTile.setValue(this.linkedTile.value + this.linkedTileForMerge.value);\n        this.linkedTileForMerge.remove();\n        this.unlinkTileForMerge();\n    }\n}\n\n\nclass $e59b914703451b85$export$f245c1f6b4acef08 {\n    constructor(gridElement){\n        this.element = document.createElement(\"div\");\n        this.element.classList.add(\"full-cell\");\n        this.setValue(Math.random() < 0.9 ? 2 : 4);\n        gridElement.append(this.element);\n    }\n    setXY(x, y) {\n        this.x = x;\n        this.y = y;\n        this.element.style.setProperty(\"--x\", x);\n        this.element.style.setProperty(\"--y\", y);\n    }\n    setValue(value) {\n        this.value = value;\n        this.element.textContent = this.value;\n        this.element.classList.remove(\"full-cell--2\", \"full-cell--4\", \"full-cell--8\", \"full-cell--16\", \"full-cell--32\", \"full-cell--64\", \"full-cell--128\", \"full-cell--256\", \"full-cell--512\", \"full-cell--1024\", \"full-cell--2048\");\n        this.element.classList.add(`full-cell--${value}`);\n    }\n    remove() {\n        this.element.remove();\n    }\n}\n\n\n\"use strict\";\nconst $a5fd07fa01589658$var$GRID_SIZE = 4;\nconst $a5fd07fa01589658$var$CELLS_COUNT = $a5fd07fa01589658$var$GRID_SIZE * $a5fd07fa01589658$var$GRID_SIZE;\nclass $a5fd07fa01589658$export$2e2bcd8739ae039 {\n    constructor(gridElement){\n        this.gridElement = gridElement;\n        this.cells = [];\n        this.score = 0;\n        this.status = \"idle\";\n        for(let i = 0; i < $a5fd07fa01589658$var$CELLS_COUNT; i++)this.cells.push(new (0, $03bae4f354eafb0f$export$f6f0c3fe4ec306ea)(gridElement, i % $a5fd07fa01589658$var$GRID_SIZE, Math.floor(i / $a5fd07fa01589658$var$GRID_SIZE)));\n        this.cellsGroupedByColumn = this.groupCellsByColumn();\n        this.cellsGroupedByReversedColumn = this.cellsGroupedByColumn.map((column)=>[\n                ...column\n            ].reverse());\n        this.cellsGroupedByRow = this.groupCellsByRow();\n        this.cellsGroupedByReversedRow = this.cellsGroupedByRow.map((row)=>[\n                ...row\n            ].reverse());\n    }\n    init() {\n        this.createNewTile();\n        this.createNewTile();\n        this.status = \"playing\";\n    }\n    getRandomEmptyCell() {\n        const emptyCells = this.cells.filter((cell)=>cell.isEmpty());\n        const randomIndex = Math.floor(Math.random() * emptyCells.length);\n        return emptyCells[randomIndex];\n    }\n    groupCellsByColumn() {\n        return this.cells.reduce((groupedCells, cell)=>{\n            groupedCells[cell.x] = groupedCells[cell.x] || [];\n            groupedCells[cell.x][cell.y] = cell;\n            return groupedCells;\n        }, []);\n    }\n    groupCellsByRow() {\n        return this.cells.reduce((groupedCells, cell)=>{\n            groupedCells[cell.y] = groupedCells[cell.y] || [];\n            groupedCells[cell.y][cell.x] = cell;\n            return groupedCells;\n        }, []);\n    }\n    moveLeft() {\n        this.slideTiles(this.cellsGroupedByRow);\n        this.checkGameOver();\n    }\n    moveRight() {\n        this.slideTiles(this.cellsGroupedByReversedRow);\n        this.checkGameOver();\n    }\n    moveUp() {\n        this.slideTiles(this.cellsGroupedByColumn);\n        this.checkGameOver();\n    }\n    moveDown() {\n        this.slideTiles(this.cellsGroupedByReversedColumn);\n        this.checkGameOver();\n    }\n    slideTiles(groupedCells) {\n        groupedCells.forEach((group)=>this.slideTilesInGroup(group));\n        this.cells.forEach((cell)=>{\n            // eslint-disable-next-line no-unused-expressions\n            cell.hasTileForMerge() && cell.mergeTiles();\n        });\n        this.createNewTile();\n        this.updateScore();\n    }\n    slideTilesInGroup(group) {\n        for(let i = 1; i < group.length; i++){\n            if (group[i].isEmpty()) continue;\n            const cellWithTile = group[i];\n            let targetCell;\n            let j = i - 1;\n            while(j >= 0 && group[j].canAccept(cellWithTile.linkedTile)){\n                targetCell = group[j];\n                j--;\n            }\n            if (!targetCell) continue;\n            if (targetCell.isEmpty()) targetCell.linkTile(cellWithTile.linkedTile);\n            else if (targetCell.linkedTile.value === cellWithTile.linkedTile.value) {\n                const points = targetCell.linkedTile.value * 2;\n                this.score += points;\n                targetCell.linkTileForMerge(cellWithTile.linkedTile);\n                cellWithTile.unlinkedTile();\n            }\n            cellWithTile.unlinkedTile();\n        }\n    }\n    canMoveUp() {\n        return this.canMove(this.cellsGroupedByColumn);\n    }\n    canMoveDown() {\n        return this.canMove(this.cellsGroupedByReversedColumn);\n    }\n    canMoveLeft() {\n        return this.canMove(this.cellsGroupedByRow);\n    }\n    canMoveRight() {\n        return this.canMove(this.cellsGroupedByReversedRow);\n    }\n    canMove(groupedCells) {\n        return groupedCells.some((group)=>this.canMoveInGroup(group));\n    }\n    canMoveInGroup(group) {\n        return group.some((cell, index)=>{\n            if (index === 0) return false;\n            if (cell.isEmpty()) return false;\n            const targetCell = group[index - 1];\n            return targetCell.canAccept(cell.linkedTile);\n        });\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        const scoreElement = document.querySelector(\".game-score\");\n        scoreElement.textContent = this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.cells.map((cell)=>({\n                x: cell.x,\n                y: cell.y,\n                value: cell.linkedTile ? cell.linkedTile.value : null\n            }));\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.score = 0;\n        this.updateScore();\n        this.clearGrid();\n        this.init();\n        this.status = \"playing\";\n        this.checkGameOver();\n    }\n    updateScore() {\n        const scoreElement = document.querySelector(\".game-score\");\n        if (scoreElement) scoreElement.textContent = this.score;\n    }\n    clearGrid() {\n        const FullCells = document.querySelectorAll(\".full-cell\");\n        FullCells.forEach((cell)=>cell.remove());\n        this.cells.forEach((cell)=>{\n            cell.linkedTile = null;\n            cell.linkedTileForMerge = null;\n        });\n    }\n    createNewTile() {\n        const cell = this.getRandomEmptyCell();\n        if (cell) {\n            // eslint-disable-next-line new-cap\n            const tile = new (0, $e59b914703451b85$export$f245c1f6b4acef08)(this.gridElement);\n            cell.linkTile(tile);\n            tile.setXY(cell.x, cell.y);\n        }\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.clearGrid();\n        this.score = 0;\n        this.updateScore();\n        this.status = \"playing\";\n    }\n    checkForWin() {\n        return this.cells.find((cell)=>cell.linkedTile && cell.linkedTile.value === 2048) !== undefined;\n    }\n    checkGameOver() {\n        if (!this.canMoveUp() && !this.canMoveDown() && !this.canMoveLeft() && !this.canMoveRight()) {\n            const messageLose = document.querySelector(\"p.message-lose\");\n            this.status = \"lose\";\n            messageLose.classList.remove(\"hidden\");\n        }\n    }\n}\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\"p.message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\"p.message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\"p.message-lose\");\nconst $09e991522ca7e64e$var$game = new (0, $a5fd07fa01589658$export$2e2bcd8739ae039)($09e991522ca7e64e$var$gameField);\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$restartButton = document.querySelector(\".button.restart\");\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$startButton.style.display = \"none\";\n    $09e991522ca7e64e$var$restartButton.style.display = \"block\";\n});\n$09e991522ca7e64e$var$restartButton.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n    $09e991522ca7e64e$var$startButton.classList.remove(\"restart\");\n    $09e991522ca7e64e$var$startButton.classList.add(\"start\");\n    $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$startButton.style.display = \"block\";\n    $09e991522ca7e64e$var$restartButton.style.display = \"none\";\n});\n$09e991522ca7e64e$var$setupInputOnce();\nfunction $09e991522ca7e64e$var$setupInputOnce() {\n    window.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleInput, {\n        once: true\n    });\n}\n// eslint-disable-next-line no-shadow\nfunction $09e991522ca7e64e$var$handleInput(event) {\n    switch(event.key){\n        case \"ArrowLeft\":\n            if ($09e991522ca7e64e$var$game.canMoveLeft()) $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            if ($09e991522ca7e64e$var$game.canMoveRight()) $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            if ($09e991522ca7e64e$var$game.canMoveUp()) $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            if ($09e991522ca7e64e$var$game.canMoveDown()) $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            $09e991522ca7e64e$var$setupInputOnce();\n            return;\n    }\n    if ($09e991522ca7e64e$var$game.checkForWin()) $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$setupInputOnce();\n}\n\n\n//# sourceMappingURL=index.20993452.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nimport Game from '../modules/Game.class';\n\nconst gameField = document.querySelector('.game-field');\nconst messageStart = document.querySelector('p.message-start');\nconst messageWin = document.querySelector('p.message-win');\nconst messageLose = document.querySelector('p.message-lose');\n\nconst game = new Game(gameField);\n\nconst startButton = document.querySelector('.button.start');\nconst restartButton = document.querySelector('.button.restart');\n\nstartButton.addEventListener('click', () => {\n  game.start();\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n\n  startButton.style.display = 'none';\n  restartButton.style.display = 'block';\n});\n\nrestartButton.addEventListener('click', () => {\n  game.restart();\n  startButton.textContent = 'Start';\n  startButton.classList.remove('restart');\n  startButton.classList.add('start');\n  messageStart.classList.remove('hidden');\n  messageLose.classList.add('hidden');\n\n  startButton.style.display = 'block';\n  restartButton.style.display = 'none';\n});\n\nsetupInputOnce();\n\nfunction setupInputOnce() {\n  window.addEventListener('keydown', handleInput, { once: true });\n}\n\n// eslint-disable-next-line no-shadow\nfunction handleInput(event) {\n  switch (event.key) {\n    case 'ArrowLeft':\n      if (game.canMoveLeft()) {\n        game.moveLeft();\n      }\n      break;\n    case 'ArrowRight':\n      if (game.canMoveRight()) {\n        game.moveRight();\n      }\n      break;\n    case 'ArrowUp':\n      if (game.canMoveUp()) {\n        game.moveUp();\n      }\n      break;\n    case 'ArrowDown':\n      if (game.canMoveDown()) {\n        game.moveDown();\n      }\n      break;\n    default:\n      setupInputOnce();\n\n      return;\n  }\n\n  if (game.checkForWin()) {\n    messageWin.classList.remove('hidden');\n  }\n\n  setupInputOnce();\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nimport { Cell } from './Cell.class';\nimport { FullCell } from './FullCell.class';\n\nconst GRID_SIZE = 4;\nconst CELLS_COUNT = GRID_SIZE * GRID_SIZE;\n\nexport default class Game {\n  constructor(gridElement) {\n    this.gridElement = gridElement;\n    this.cells = [];\n    this.score = 0;\n    this.status = 'idle';\n\n    for (let i = 0; i < CELLS_COUNT; i++) {\n      this.cells.push(\n        new Cell(gridElement, i % GRID_SIZE, Math.floor(i / GRID_SIZE)),\n      );\n    }\n\n    this.cellsGroupedByColumn = this.groupCellsByColumn();\n\n    this.cellsGroupedByReversedColumn = this.cellsGroupedByColumn.map(\n      (column) => [...column].reverse(),\n    );\n\n    this.cellsGroupedByRow = this.groupCellsByRow();\n\n    this.cellsGroupedByReversedRow = this.cellsGroupedByRow.map(\n      (row) => [...row].reverse(),\n      // eslint-disable-next-line function-paren-newline\n    );\n  }\n\n  init() {\n    this.createNewTile();\n    this.createNewTile();\n    this.status = 'playing';\n  }\n\n  getRandomEmptyCell() {\n    const emptyCells = this.cells.filter((cell) => cell.isEmpty());\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n    return emptyCells[randomIndex];\n  }\n\n  groupCellsByColumn() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.x] = groupedCells[cell.x] || [];\n      groupedCells[cell.x][cell.y] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n\n  groupCellsByRow() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.y] = groupedCells[cell.y] || [];\n      groupedCells[cell.y][cell.x] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n\n  moveLeft() {\n    this.slideTiles(this.cellsGroupedByRow);\n    this.checkGameOver();\n  }\n\n  moveRight() {\n    this.slideTiles(this.cellsGroupedByReversedRow);\n    this.checkGameOver();\n  }\n\n  moveUp() {\n    this.slideTiles(this.cellsGroupedByColumn);\n    this.checkGameOver();\n  }\n\n  moveDown() {\n    this.slideTiles(this.cellsGroupedByReversedColumn);\n    this.checkGameOver();\n  }\n\n  slideTiles(groupedCells) {\n    groupedCells.forEach((group) => this.slideTilesInGroup(group));\n\n    this.cells.forEach((cell) => {\n      // eslint-disable-next-line no-unused-expressions\n      cell.hasTileForMerge() && cell.mergeTiles();\n    });\n\n    this.createNewTile();\n    this.updateScore();\n  }\n\n  slideTilesInGroup(group) {\n    for (let i = 1; i < group.length; i++) {\n      if (group[i].isEmpty()) {\n        continue;\n      }\n\n      const cellWithTile = group[i];\n\n      let targetCell;\n      let j = i - 1;\n\n      while (j >= 0 && group[j].canAccept(cellWithTile.linkedTile)) {\n        targetCell = group[j];\n        j--;\n      }\n\n      if (!targetCell) {\n        continue;\n      }\n\n      if (targetCell.isEmpty()) {\n        targetCell.linkTile(cellWithTile.linkedTile);\n      } else if (\n        targetCell.linkedTile.value === cellWithTile.linkedTile.value\n      ) {\n        const points = targetCell.linkedTile.value * 2;\n\n        this.score += points;\n\n        targetCell.linkTileForMerge(cellWithTile.linkedTile);\n        cellWithTile.unlinkedTile();\n      }\n\n      cellWithTile.unlinkedTile();\n    }\n  }\n\n  canMoveUp() {\n    return this.canMove(this.cellsGroupedByColumn);\n  }\n\n  canMoveDown() {\n    return this.canMove(this.cellsGroupedByReversedColumn);\n  }\n\n  canMoveLeft() {\n    return this.canMove(this.cellsGroupedByRow);\n  }\n\n  canMoveRight() {\n    return this.canMove(this.cellsGroupedByReversedRow);\n  }\n\n  canMove(groupedCells) {\n    return groupedCells.some((group) => this.canMoveInGroup(group));\n  }\n\n  canMoveInGroup(group) {\n    return group.some((cell, index) => {\n      if (index === 0) {\n        return false;\n      }\n\n      if (cell.isEmpty()) {\n        return false;\n      }\n\n      const targetCell = group[index - 1];\n\n      return targetCell.canAccept(cell.linkedTile);\n    });\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    const scoreElement = document.querySelector('.game-score');\n\n    scoreElement.textContent = this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.cells.map((cell) => ({\n      x: cell.x,\n      y: cell.y,\n      value: cell.linkedTile ? cell.linkedTile.value : null,\n    }));\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.score = 0;\n    this.updateScore();\n    this.clearGrid();\n\n    this.init();\n    this.status = 'playing';\n    this.checkGameOver();\n  }\n\n  updateScore() {\n    const scoreElement = document.querySelector('.game-score');\n\n    if (scoreElement) {\n      scoreElement.textContent = this.score;\n    }\n  }\n\n  clearGrid() {\n    const FullCells = document.querySelectorAll('.full-cell');\n\n    FullCells.forEach((cell) => cell.remove());\n\n    this.cells.forEach((cell) => {\n      cell.linkedTile = null;\n      cell.linkedTileForMerge = null;\n    });\n  }\n\n  createNewTile() {\n    const cell = this.getRandomEmptyCell();\n\n    if (cell) {\n      // eslint-disable-next-line new-cap\n      const tile = new FullCell(this.gridElement);\n\n      cell.linkTile(tile);\n\n      tile.setXY(cell.x, cell.y);\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.clearGrid();\n    this.score = 0;\n    this.updateScore();\n    this.status = 'playing';\n  }\n\n  checkForWin() {\n    return (\n      this.cells.find(\n        (cell) => cell.linkedTile && cell.linkedTile.value === 2048,\n      ) !== undefined\n    );\n  }\n\n  checkGameOver() {\n    if (\n      !this.canMoveUp() &&\n      !this.canMoveDown() &&\n      !this.canMoveLeft() &&\n      !this.canMoveRight()\n    ) {\n      const messageLose = document.querySelector('p.message-lose');\n\n      this.status = 'lose';\n      messageLose.classList.remove('hidden');\n    }\n  }\n}\n","export class Cell {\n  constructor(gridElement, x, y) {\n    const emptyCell = document.createElement('div');\n\n    emptyCell.classList.add('empty-cell');\n    gridElement.append(emptyCell);\n    this.x = x;\n    this.y = y;\n    this.element = emptyCell;\n    this.linkedTile = null;\n    this.linkedTileForMerge = null;\n  }\n\n  linkTile(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTile = tile;\n  }\n\n  unlinkedTile() {\n    this.linkedTile = null;\n  }\n\n  isEmpty() {\n    return !this.linkedTile;\n  }\n\n  linkTileForMerge(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTileForMerge = tile;\n  }\n\n  unlinkTileForMerge() {\n    this.linkedTileForMerge = null;\n  }\n\n  hasTileForMerge() {\n    return !!this.linkedTileForMerge;\n  }\n\n  canAccept(newTile) {\n    return (\n      this.isEmpty() ||\n      (!this.hasTileForMerge() && this.linkedTile.value === newTile.value)\n    );\n  }\n\n  mergeTiles() {\n    this.linkedTile.setValue(\n      this.linkedTile.value + this.linkedTileForMerge.value,\n    );\n    this.linkedTileForMerge.remove();\n    this.unlinkTileForMerge();\n  }\n}\n","export class FullCell {\n  constructor(gridElement) {\n    this.element = document.createElement('div');\n    this.element.classList.add('full-cell');\n    this.setValue(Math.random() < 0.9 ? 2 : 4);\n\n    gridElement.append(this.element);\n  }\n\n  setXY(x, y) {\n    this.x = x;\n    this.y = y;\n    this.element.style.setProperty('--x', x);\n    this.element.style.setProperty('--y', y);\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.element.textContent = this.value;\n\n    this.element.classList.remove(\n      'full-cell--2',\n      'full-cell--4',\n      'full-cell--8',\n      'full-cell--16',\n      'full-cell--32',\n      'full-cell--64',\n      'full-cell--128',\n      'full-cell--256',\n      'full-cell--512',\n      'full-cell--1024',\n      'full-cell--2048',\n    );\n\n    this.element.classList.add(`full-cell--${value}`);\n  }\n\n  remove() {\n    this.element.remove();\n  }\n}\n"],"names":["$03bae4f354eafb0f$export$f6f0c3fe4ec306ea","constructor","gridElement","x","y","emptyCell","document","createElement","classList","add","append","element","linkedTile","linkedTileForMerge","linkTile","tile","setXY","unlinkedTile","isEmpty","linkTileForMerge","unlinkTileForMerge","hasTileForMerge","canAccept","newTile","value","mergeTiles","setValue","remove","$e59b914703451b85$export$f245c1f6b4acef08","Math","random","style","setProperty","textContent","$09e991522ca7e64e$var$gameField","querySelector","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$game","cells","score","status","i","$a5fd07fa01589658$var$GRID_SIZE","push","floor","cellsGroupedByColumn","groupCellsByColumn","cellsGroupedByReversedColumn","map","column","reverse","cellsGroupedByRow","groupCellsByRow","cellsGroupedByReversedRow","row","init","createNewTile","getRandomEmptyCell","emptyCells","filter","cell","randomIndex","length","reduce","groupedCells","moveLeft","slideTiles","checkGameOver","moveRight","moveUp","moveDown","forEach","group","slideTilesInGroup","updateScore","targetCell","cellWithTile","j","points","canMoveUp","canMove","canMoveDown","canMoveLeft","canMoveRight","some","canMoveInGroup","index","getScore","scoreElement","getState","getStatus","start","clearGrid","FullCells","querySelectorAll","restart","checkForWin","undefined","find","messageLose","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$restartButton","$09e991522ca7e64e$var$setupInputOnce","window","addEventListener","$09e991522ca7e64e$var$handleInput","once","event","key","display"],"version":3,"file":"index.20993452.js.map"}